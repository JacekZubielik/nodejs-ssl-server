name: Publish
permissions:
  contents: write
on:
  push:
    branches: [main]
    paths-ignore:
      - 'doc/**'
      - 'appdata/**'
      - '.dockerignore'
      - '.env'
      - '.env_exemple'
      - '.gitignore'
      - 'docker-compose.yml'
      - '*.md'
      - '.github/workflows/*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.1.2

      # Setup QEMU
      # https://github.com/marketplace/actions/docker-setup-buildx#with-qemu
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          # platforms: linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

























# jobs:
#   # linter:
#   #   name: Linter
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Checkout code
#   #       uses: actions/checkout@v4
#   #       with:
#   #         fetch-depth: 0

#   #     - name: Set up Node.js
#   #       uses: actions/setup-node@v4
#   #       with:
#   #         node-version: 20.12

#   #     - name: Install dependencies
#   #       run: |
#   #         npm install

#   #     - name: Run linter
#   #       uses: github/super-linter@v6
#   #       env:
#   #         VALIDATE_ALL_CODEBASE: false
#   #         VALIDATE_JAVASCRIPT_ES: true
#   #         DEFAULT_BRANCH: main
#   #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   build:
#     name: Build
#     # needs: [ linter ]
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Setup Node 20
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20.12
#           cache: 'npm'

#       - name: Install dependencies
#         run: |
#           npm ci

#       - name: Compile
#         run: |
#           npm run clean && \
#           npm run dist

#       - name: Create artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: "app-${{ github.sha }}"
#           path: dist/*.js

#   image:
#     name: Image
#     needs: [ build ]
#     runs-on: [ubuntu-latest]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       # - name: Build and Push Container to ghcr.io
#       #   uses: GlueOps/github-actions-build-push-containers@v0.4.1

#       # - name: Login to Docker Hub
#       #   run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

#       # - name: Build Docker image
#       #   run: docker build -t gorabbit/nodejs-ssl-server .

#       # - name: Publish image to docker hub
#       #   run: docker push gorabbit/nodejs-ssl-server:latest

#       - name: Build and publish a Docker image for ${{ github.repository }}
#         uses: macbre/push-to-ghcr@master
#         with:
#           image_name: ${{ github.repository }}  # it will be lowercased internally
#           github_token: ${{ secrets.GITHUB_TOKEN }}