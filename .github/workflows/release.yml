name: Release

on:
  pull_request:
    branches:
    - "main"
    types:
    - closed

  push:
    tags:
      - "v*.*.*"
    paths-ignore:
      - 'CONTRIBUTING.md'
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  discussions: write

jobs:
  # linter:
  #   name: Linter
  #   runs-on: [ubuntu-latest]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Setup Node 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.12
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: |
  #         npm install

  #     - name: Run linter
  #       uses: github/super-linter@v6
  #       env:
  #         VALIDATE_ALL_CODEBASE: false
  #         VALIDATE_JAVASCRIPT_ES: true
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    # needs: [ linter ]
    runs-on: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.12
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Compile
        run: |
          npm run clean && \
          npm run dist

      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: "app-${{ github.sha }}"
          path: |
            dist/*.js

      - name: Create release zip
        run: zip -r release.zip .
        if: success()

  release:
    name: Release
    needs: [ build ]
    runs-on: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch version
        run: |
          VERSION=$(echo "${GITHUB_HEAD_REF}" | sed "s/release\\/v//")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        id: fetch-version

      - name: Generate release notes
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          # tag_name: v${{ steps.fetch-version.outputs.version }}
          tag_name: ${{ needs.create_release.outputs.tag-name }}
          #files: release_${{ matrix.release_suffix }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release.zip
            dist/**

  image:
    needs: [ release ]
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            gorabbit/nodejs-ssl-server
            ghcr.io/jacekzubielik/nodejs-ssl-server
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Login to DockerHub ${{ env.REGISTRY }}
        # if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}